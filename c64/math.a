; http://www.6502.org/tutorials/6502opcodes.html
; https://sites.google.com/site/6502asembly/6502-instruction-set
    

;https://github.com/meonwax/acme/blob/master/docs/AddrModes.txt
; Applying the byte extraction operators ("<" gives the low byte, ">"
; gives the high byte and "^" gives the bank byte of a value) to any
; value will clear the argument's Force Bits 2 and 3 and set Force
; Bit 1 instead. So "lda <symbol" will use 8-bit addressing, regardless
; of the symbol's Force Bits. Of course, you can change this by
; postfixing the command again... :

    !to "math.prg",cbm
    *= $2000
    !src "fixpoint.a"
    *= $1000
    jsr init16

    +test_mul $97, $97
    +test_mul $100, $100
    +test_mul $100, $197
    +test_mul $97, $100
    +test_mul $100, $97
    +test_mul $97, $97
    +test_mul $197, $197
   
    ; jsr _fac1_read_signedAAYY
    ; jsr _fac1_print




    ; +movYYAA mflpt2
    ; jsr fac1_read_memYYAA
    ; jsr fac1_print

    ; +movYYAA mflpt2
    ; jsr fac1_times_memYYAA
    ; jsr fac1_print

    rts

mflptZero: +mflpt    0
mflptPi: +mflpt    3.1415926
mflpt1: +mflpt    1.0
mflpt2: +mflpt    2.0
mflptMinus2: +mflpt    -2.0
mflpt4: +mflpt    4.0
mflptMinus4: +mflpt    -4.0
    ; *= $1000
    ; jsr init16

    ; +movA -20
    ; +movX -10
    ; jsr add16
    ; jsr printA

    ; +movA -20
    ; +movX -10
    ; jsr sub16
    ; jsr printA

    ; +movA 0
    ; jsr neg16
    ; jsr printA

    ; +movA 20
    ; +movX 20
    ; jsr mul16
    ; jsr printA

    ; ; jsr printMulResult
   
    rts


